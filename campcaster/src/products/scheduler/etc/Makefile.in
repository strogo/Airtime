#-------------------------------------------------------------------------------
#   Copyright (c) 2004 Media Development Loan Fund
#
#   This file is part of the Campcaster project.
#   http://campcaster.campware.org/
#   To report bugs, send an e-mail to bugs@campware.org
#
#   Campcaster is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   Campcaster is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Campcaster; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
#   Author   : $Author$
#   Version  : $Revision$
#   Location : $URL$
#
#   @configure_input@
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#   General command definitions
#-------------------------------------------------------------------------------
MKDIR   = mkdir -p
RM      = rm -f
RMDIR   = rm -rf
DOXYGEN = doxygen
KILLALL = killall
CP      = cp -f
SED     = sed
ECHO    = echo
CAT     = cat


#-------------------------------------------------------------------------------
#   Basic directory and file definitions
#-------------------------------------------------------------------------------
BASE_DIR     = @builddir@
DOC_DIR      = ${BASE_DIR}/doc
DOXYGEN_DIR  = ${DOC_DIR}/doxygen
COVERAGE_DIR = ${DOC_DIR}/coverage
BIN_DIR      = ${BASE_DIR}/bin
ETC_DIR      = ${BASE_DIR}/etc
SRC_DIR      = ${BASE_DIR}/src
VAR_DIR      = ${BASE_DIR}/var
TMP_DIR      = ${BASE_DIR}/tmp

REAL_BASE_DIR=$(shell cd ${BASE_DIR}; pwd)


prefix = @prefix@

USR_DIR         = ${prefix}
USR_BIN_DIR     = ${USR_DIR}/bin
USR_ETC_DIR     = ${USR_DIR}/etc
USR_INCLUDE_DIR = ${USR_DIR}/include
USR_LIB_DIR     = ${USR_DIR}/lib
USR_VAR_DIR     = ${USR_DIR}/var/Campcaster/scheduler/var
USR_TMP_DIR     = ${USR_DIR}/tmp
STORAGE_TMP_DIR = "/tmp"

HOSTNAME                = @HOSTNAME@
WWW_PORT                = @WWW_PORT@
SCHEDULER_PORT          = @SCHEDULER_PORT@
DB_SERVER               = @DB_SERVER@
DATABASE                = @DATABASE@
DB_USER                 = @DB_USER@
DB_PASSWORD             = @DB_PASSWORD@
AUDIO_OUT               = "@AUDIO_OUT@"

PHP_URL_PREFIX=campcaster
ALIB_XML_RPC_PREFIX=xmlrpc/xrLocStor.php
POSTGRES_USER=postgres

USR_LIB_DIR_S=$(shell ${ECHO} ${USR_LIB_DIR} | ${SED} -e "s/\//\\\\\\\\\//g")
STORAGE_TMP_DIR_S=$(shell ${ECHO} ${STORAGE_TMP_DIR} | \
                        ${SED} -e "s/\//\\\\\\\\\//g")
PHP_URL_PREFIX_S=$(shell ${ECHO} ${PHP_URL_PREFIX} | \
                        ${SED} -e "s/\//\\\\\\\\\//g")
ALIB_XML_RPC_PREFIX_S=$(shell ${ECHO} ${ALIB_XML_RPC_PREFIX} | \
                        ${SED} -e "s/\//\\\\\\\\\//g")
AUDIO_OUT_S=$(shell ${ECHO} ${AUDIO_OUT} | ${SED} -e "s/\//\\\\\\\\\//g")


REPLACE_SED_STRING="s/ls_lib_dir/${USR_LIB_DIR_S}/; \
              s/ls_dbuser/${DB_USER}/; \
              s/ls_dbpassword/${DB_PASSWORD}/; \
              s/ls_dbserver/${DB_SERVER}/; \
              s/ls_database/${DATABASE}/; \
              s/ls_php_urlPrefix/${PHP_URL_PREFIX_S}/; \
              s/ls_php_host/${HOSTNAME}/; \
              s/ls_php_port/${WWW_PORT}/; \
              s/ls_alib_xmlRpcPrefix/${ALIB_XML_RPC_PREFIX_S}/; \
              s/ls_tmp_dir/${STORAGE_TMP_DIR_S}/; \
              s/ls_audio_output_device/${AUDIO_OUT_S}/; \
              s/ls_scheduler_host/${HOSTNAME}/; \
              s/ls_scheduler_port/${SCHEDULER_PORT}/;"

VPATH    = ${SRC_DIR}

BOOST_CFLAGS=@BOOST_CPPFLAGS@
BOOST_LIBS=@BOOST_LDFLAGS@
BOOST_DATE_TIME_LIB=@BOOST_DATE_TIME_LIB@

LIBXMLPP_CFLAGS=@LIBXMLPP_CFLAGS@
LIBXMLPP_LIBS=@LIBXMLPP_LIBS@

LIBODBCXX_CFLAGS=@LIBODBCXX_CFLAGS@
LIBODBCXX_LIBS=@LIBODBCXX_LIBS@

GSTREAMER_CFLAGS=@GSTREAMER_CFLAGS@
GSTREAMER_LIBS=@GSTREAMER_LIBS@


CURL_CFLAGS=@CURL_CFLAGS@
CURL_LIBS=@CURL_LIBS@

ICU_CFLAGS=@ICU_CFLAGS@
ICU_CXXFLAGS=@ICU_CXXFLAGS@
ICU_LIBS=@ICU_LIBS@

TAGLIB_CFLAGS=@TAGLIB_CFLAGS@
TAGLIB_LIBS=@TAGLIB_LIBS@

MODULES_DIR = ${BASE_DIR}/../../modules

CORE_DIR         = ${MODULES_DIR}/core
CORE_INCLUDE_DIR = ${CORE_DIR}/include
CORE_LIB_DIR     = ${CORE_DIR}/lib
CORE_LIB         = livesupport_core
CORE_LIB_FILE    = ${CORE_LIB_DIR}/lib${CORE_LIB}.a

AUTHENTICATION_DIR         = ${MODULES_DIR}/authentication
AUTHENTICATION_INCLUDE_DIR = ${AUTHENTICATION_DIR}/include
AUTHENTICATION_LIB_DIR     = ${AUTHENTICATION_DIR}/lib
AUTHENTICATION_LIB         = livesupport_authentication
AUTHENTICATION_LIB_FILE = ${AUTHENTICATION_LIB_DIR}/lib${AUTHENTICATION_LIB}.a

DB_DIR         = ${MODULES_DIR}/db
DB_INCLUDE_DIR = ${DB_DIR}/include
DB_LIB_DIR     = ${DB_DIR}/lib
DB_LIB         = livesupport_db
DB_LIB_FILE    = ${DB_LIB_DIR}/lib${DB_LIB}.a

STORAGE_CLIENT_DIR         = ${MODULES_DIR}/storageClient
STORAGE_CLIENT_INCLUDE_DIR = ${STORAGE_CLIENT_DIR}/include
STORAGE_CLIENT_LIB_DIR     = ${STORAGE_CLIENT_DIR}/lib
STORAGE_CLIENT_LIB         = livesupport_storage_client
STORAGE_CLIENT_LIB_FILE    = ${STORAGE_CLIENT_LIB_DIR}/lib${STORAGE_CLIENT_LIB}.a

STORAGE_SERVER_DIR    = ${MODULES_DIR}/storageServer

GSTREAMER_ELEMENTS_DIR         = ${MODULES_DIR}/gstreamerElements
GSTREAMER_ELEMENTS_INCLUDE_DIR = ${GSTREAMER_ELEMENTS_DIR}/include
GSTREAMER_ELEMENTS_LIB_DIR     = ${GSTREAMER_ELEMENTS_DIR}/lib
GSTREAMER_ELEMENTS_LIB         = livesupport_gstreamerelements
GSTREAMER_ELEMENTS_LIB_FILE    = ${GSTREAMER_ELEMENTS_LIB_DIR}/lib${GSTREAMER_ELEMENTS_LIB}.a
GST_REAL_LIB_DIR=${REAL_BASE_DIR}/modules/gstreamerElements/lib

PLAYLIST_EXECUTOR_DIR         = ${MODULES_DIR}/playlistExecutor
PLAYLIST_EXECUTOR_INCLUDE_DIR = ${PLAYLIST_EXECUTOR_DIR}/include
PLAYLIST_EXECUTOR_LIB_DIR     = ${PLAYLIST_EXECUTOR_DIR}/lib
PLAYLIST_EXECUTOR_LIB         = livesupport_playlist_executor
PLAYLIST_EXECUTOR_LIB_FILE    = ${PLAYLIST_EXECUTOR_LIB_DIR}/lib${PLAYLIST_EXECUTOR_LIB}.a

EVENT_SCHEDULER_DIR         = ${MODULES_DIR}/eventScheduler
EVENT_SCHEDULER_INCLUDE_DIR = ${EVENT_SCHEDULER_DIR}/include
EVENT_SCHEDULER_LIB_DIR     = ${EVENT_SCHEDULER_DIR}/lib
EVENT_SCHEDULER_LIB         = livesupport_event_scheduler
EVENT_SCHEDULER_LIB_FILE    = ${EVENT_SCHEDULER_LIB_DIR}/lib${EVENT_SCHEDULER_LIB}.a

TEST_RESULTS = ${DOC_DIR}/testResults.xml
# the text result XSLT has to be relative to the test result file, e.g. TMP_DIR
TEST_XSLT    = ../etc/testResultToHtml.xsl

SCHEDULER_EXE       = ${TMP_DIR}/campcaster-scheduler
SCHEDULER_SH        = ${BIN_DIR}/campcaster-scheduler_devenv.sh
SCHEDULER_CFG       = ${ETC_DIR}/campcaster-scheduler.xml
SCHEDULER_LOCAL_CFG = ${ETC_DIR}/campcaster-scheduler-local.xml
TEST_RUNNER         = ${TMP_DIR}/testRunner
TEST_RUNNER_SH      = ${BIN_DIR}/run_tests.sh

DOXYGEN_CONFIG = ${ETC_DIR}/doxygen.config

export LD_LIBRARY_PATH:=${USR_LIB_DIR}:${LD_LIBRARY_PATH}
export GST_PLUGIN_PATH=${GST_REAL_LIB_DIR}


#-------------------------------------------------------------------------------
#  	Configuration parameters
#-------------------------------------------------------------------------------
CPPFLAGS = @CPPFLAGS@
CXXFLAGS = @CXXFLAGS@ @DEFS@ @COVERAGE_CXXFLAGS@ -pthread \
                             -pedantic -Wall -Wno-long-long \
                             ${BOOST_CFLAGS} \
                             ${LIBXMLPP_CFLAGS} \
							 ${LIBODBCXX_CFLAGS} \
							 ${GSTREAMER_CFLAGS} \
                             ${TAGLIB_CFLAGS} \
                             ${LIBTAR_CFLAGS} \
                             -I${USR_INCLUDE_DIR} \
                             -I${CORE_INCLUDE_DIR} \
                             -I${AUTHENTICATION_INCLUDE_DIR} \
                             -I${DB_INCLUDE_DIR} \
                             -I${STORAGE_CLIENT_INCLUDE_DIR} \
                             -I${GSTREAMER_ELEMENTS_INCLUDE_DIR} \
                             -I${PLAYLIST_EXECUTOR_INCLUDE_DIR} \
                             -I${EVENT_SCHEDULER_INCLUDE_DIR} \
                             -I${TMP_DIR}
LDFLAGS  = @LDFLAGS@ -pthread \
                     ${BOOST_LIBS} \
                     ${LIBXMLPP_LIBS} \
					 ${LIBODBCXX_LIBS} \
					 ${GSTREAMER_LIBS} \
                     ${CURL_LIBS} \
                     ${ICU_LIBS} \
                     ${TAGLIB_LIBS} \
                     ${LIBTAR_LIBS} \
                     -L${USR_LIB_DIR} \
                     -L${CORE_LIB_DIR} \
                     -L${AUTHENTICATION_LIB_DIR} \
                     -L${DB_LIB_DIR} \
                     -L${STORAGE_CLIENT_LIB_DIR} \
                     -L${GSTREAMER_ELEMENTS_LIB_DIR} \
                     -L${PLAYLIST_EXECUTOR_LIB_DIR} \
                     -L${EVENT_SCHEDULER_LIB_DIR}


#-------------------------------------------------------------------------------
#	Dependencies
#-------------------------------------------------------------------------------
SCHEDULER_OBJS = ${TMP_DIR}/SignalDispatcher.o \
                 ${TMP_DIR}/XmlRpcDaemon.o \
                 ${TMP_DIR}/SchedulerDaemon.o \
                 ${TMP_DIR}/GetVersionMethod.o \
                 ${TMP_DIR}/UploadPlaylistMethod.o \
                 ${TMP_DIR}/DisplayScheduleMethod.o \
                 ${TMP_DIR}/RemoveFromScheduleMethod.o \
                 ${TMP_DIR}/RescheduleMethod.o \
                 ${TMP_DIR}/ScheduleFactory.o \
                 ${TMP_DIR}/PostgresqlSchedule.o \
                 ${TMP_DIR}/GetSchedulerTimeMethod.o \
                 ${TMP_DIR}/PlayLogFactory.o \
                 ${TMP_DIR}/PostgresqlPlayLog.o \
                 ${TMP_DIR}/GeneratePlayReportMethod.o \
                 ${TMP_DIR}/PlaylistEventContainer.o \
                 ${TMP_DIR}/PlaylistEvent.o \
                 ${TMP_DIR}/ResetStorageMethod.o \
                 ${TMP_DIR}/LoginMethod.o \
                 ${TMP_DIR}/LogoutMethod.o \
                 ${TMP_DIR}/BackupFactory.o \
                 ${TMP_DIR}/PostgresqlBackup.o \
                 ${TMP_DIR}/CreateBackupOpenMethod.o \
                 ${TMP_DIR}/CreateBackupCheckMethod.o \
                 ${TMP_DIR}/CreateBackupCloseMethod.o \
                 ${TMP_DIR}/RestoreBackupMethod.o \
                 ${TMP_DIR}/StopCurrentlyPlayingMethod.o


SCHEDULER_EXE_OBJS = ${SCHEDULER_OBJS} \
                     ${TMP_DIR}/main.o
SCHEDULER_EXE_LIBS = -l${EVENT_SCHEDULER_LIB} -l${PLAYLIST_EXECUTOR_LIB} \
                     -l${GSTREAMER_ELEMENTS_LIB} \
                     -l${STORAGE_CLIENT_LIB} -l${DB_LIB} \
					 -l${AUTHENTICATION_LIB} \
                     -l${CORE_LIB} \
                     ${BOOST_DATE_TIME_LIB} \
                     -lxmlrpc++ -lssl -ltar

TEST_RUNNER_OBJS = ${SCHEDULER_OBJS} \
                   ${TMP_DIR}/TestRunner.o \
                   ${TMP_DIR}/BaseTestMethod.o \
                   ${TMP_DIR}/ResetStorageMethodTest.o \
                   ${TMP_DIR}/SchedulerDaemonTest.o \
                   ${TMP_DIR}/GetSchedulerTimeMethodTest.o \
                   ${TMP_DIR}/RpcGetSchedulerTimeTest.o \
                   ${TMP_DIR}/GetVersionMethodTest.o \
                   ${TMP_DIR}/RpcGetVersionTest.o \
                   ${TMP_DIR}/UploadPlaylistMethodTest.o \
                   ${TMP_DIR}/RpcUploadPlaylistTest.o \
                   ${TMP_DIR}/DisplayScheduleMethodTest.o \
                   ${TMP_DIR}/RpcDisplayScheduleTest.o \
                   ${TMP_DIR}/RemoveFromScheduleMethodTest.o \
                   ${TMP_DIR}/RpcRemoveFromScheduleTest.o \
                   ${TMP_DIR}/RescheduleMethodTest.o \
                   ${TMP_DIR}/RpcRescheduleTest.o \
                   ${TMP_DIR}/PostgresqlScheduleTest.o \
                   ${TMP_DIR}/PostgresqlPlayLogTest.o \
                   ${TMP_DIR}/GeneratePlayReportMethodTest.o \
                   ${TMP_DIR}/RpcGeneratePlayReportTest.o \
                   ${TMP_DIR}/PlaylistEventContainerTest.o \
                   ${TMP_DIR}/PlaylistEventTest.o \
                   ${TMP_DIR}/PostgresqlBackupTest.o \
                   ${TMP_DIR}/RpcBackupTest.o \
                   ${TMP_DIR}/RpcStopCurrentlyPlayingTest.o

TEST_RUNNER_LIBS = ${SCHEDULER_EXE_LIBS} -lcppunit -ldl


#-------------------------------------------------------------------------------
#   Targets
#-------------------------------------------------------------------------------
.PHONY: all dir_setup doc clean docclean depclean distclean check install
.PHONY: init start status run_tests stop deinit
.PHONY: init_local start_local status_local run_local stop_local
.PHONY: deinit_local check check_local
.PHONY: copy_files create_database create_odbc_datasource init_database

all: dir_setup ${SCHEDULER_EXE}

dir_setup: ${TMP_DIR} ${DOXYGEN_DIR}

doc:
	${DOXYGEN} ${DOXYGEN_CONFIG}

clean:
	${RM} ${SCHEDULER_EXE_OBJS} ${SCHEDULER_EXE}
	${RM} ${TEST_RUNNER_OBJS} ${TEST_RUNNER}
	${RM} ${TMP_DIR}/*.bb ${TMP_DIR}/*.bbg ${TMP_DIR}/*.da ${TMP_DIR}/*.info

docclean:
	${RMDIR} ${DOXYGEN_DIR}/html
	${RMDIR} ${COVERAGE_DIR}/*
	${RM} ${TEST_RESULTS}

depclean: clean
	${MAKE} -C ${EVENT_SCHEDULER_DIR} clean
	${MAKE} -C ${PLAYLIST_EXECUTOR_DIR} clean
	${MAKE} -C ${STORAGE_CLIENT_DIR} clean
	${MAKE} -C ${DB_DIR} clean
	${MAKE} -C ${AUTHENTICATION_DIR} clean
	${MAKE} -C ${CORE_DIR} clean

distclean: clean docclean
	${RMDIR} ${TMP_DIR}/config* ${TMP_DIR}/autom4te* ${TMP_DIR}/ac*.m4

check: all ${TEST_RUNNER} storage_server_init kill start run_tests stop

install: all copy_files create_database create_odbc_datasource init_database

copy_files:
	${MAKE} -C ${CORE_DIR} install
	${MAKE} -C ${AUTHENTICATION_DIR} install
	${MAKE} -C ${DB_DIR} install
	${MAKE} -C ${STORAGE_CLIENT_DIR} install
	${MAKE} -C ${PLAYLIST_EXECUTOR_DIR} install
	${MAKE} -C ${EVENT_SCHEDULER_DIR} install
	${MKDIR} ${USR_BIN_DIR}
	${MKDIR} ${USR_ETC_DIR}
	${MKDIR} ${USR_VAR_DIR}/install
	${MKDIR} ${USR_TMP_DIR}
	${CP} ${BIN_DIR}/campcaster-scheduler.sh ${USR_BIN_DIR}
	${CP} ${SCHEDULER_EXE} ${USR_BIN_DIR}
	${CP} ${ETC_DIR}/odbcinst_old_debian_template \
	      ${ETC_DIR}/odbcinst_new_debian_template \
	      ${ETC_DIR}/odbcinst_template ${USR_ETC_DIR}
	${CP} ${BIN_DIR}/createDatabase.sh \
	      ${BIN_DIR}/createOdbcDataSource.sh ${USR_BIN_DIR}
	${CAT} ${ETC_DIR}/odbc_template | ${SED} -e ${REPLACE_SED_STRING} \
	       > ${USR_ETC_DIR}/odbc_template
	${CAT} ${ETC_DIR}/campcaster-scheduler.xml.template \
	       | ${SED} -e ${REPLACE_SED_STRING} \
	       > ${USR_ETC_DIR}/campcaster-scheduler.xml
	${CP} ${VAR_DIR}/install/*.php ${USR_VAR_DIR}/install/

create_database:
ifeq (@CREATE_LS_DATABASE@,yes)
	${BIN_DIR}/createDatabase.sh --database=${DATABASE} \
	                             --dbserver=${DB_SERVER} \
								 --dbuser=${DB_USER} \
								 --dbpassword=${DB_PASSWORD}
endif

create_odbc_datasource:
ifeq (@CREATE_ODBC_DATA_SOURCE@,yes)
	${BIN_DIR}/createOdbcDataSource.sh --database=${DATABASE} \
	                                   --dbserver=${DB_SERVER}
endif

init_database:
ifeq (@INIT_LS_DATABASE@,yes)
	${USR_BIN_DIR}/campcaster-scheduler.sh install
endif


check_local: all ${TEST_RUNNER} kill start_local run_tests stop_local

run_tests: ${TEST_RUNNER}
	${TEST_RUNNER_SH} -o ${TEST_RESULTS} -s ${TEST_XSLT}

init: ${SCHEDULER_EXE}
	${SCHEDULER_SH} install

start: ${SCHEDULER_EXE}
	${SCHEDULER_SH} start
	sleep 2

run: ${SCHEDULER_EXE}
	${SCHEDULER_SH} run

stop: ${SCHEDULER_EXE}
	${SCHEDULER_SH} stop
	sleep 2

status: ${SCHEDULER_EXE}
	${SCHEDULER_SH} status

deinit: ${SCHEDULER_EXE}
	${SCHEDULER_SH} uninstall

init_local: ${SCHEDULER_EXE}
	${SCHEDULER_EXE} -c ${SCHEDULER_LOCAL_CFG} install

start_local: ${SCHEDULER_EXE}
	${SCHEDULER_EXE} -c ${SCHEDULER_LOCAL_CFG} start
	sleep 2

stop_local: ${SCHEDULER_EXE}
	${SCHEDULER_EXE} -c ${SCHEDULER_LOCAL_CFG} stop
	sleep 2

status_local: ${SCHEDULER_EXE}
	${SCHEDULER_EXE} -c ${SCHEDULER_LOCAL_CFG} status

run_local: ${SCHEDULER_EXE}
	${SCHEDULER_EXE} -c ${SCHEDULER_LOCAL_CFG} --debug start
	sleep 2

deinit_local: ${SCHEDULER_EXE}
	${SCHEDULER_EXE} -c ${SCHEDULER_LOCAL_CFG} uninstall

storage_server_init:
	${MAKE} -C ${STORAGE_SERVER_DIR}

kill:
	${KILLALL} campcaster-scheduler || true
	sleep 2
	${KILLALL} -9 campcaster-scheduler || true


#-------------------------------------------------------------------------------
#   Specific targets
#-------------------------------------------------------------------------------
${SCHEDULER_EXE}: ${CORE_LIB_FILE} ${AUTHENTICATION_LIB_FILE} ${DB_LIB_FILE} \
                  ${STORAGE_CLIENT_LIB_FILE} \
                  ${PLAYLIST_EXECUTOR_LIB_FILE} ${EVENT_SCHEDULER_LIB_FILE} \
                  ${SCHEDULER_EXE_OBJS}
	${CXX} ${LDFLAGS} -o $@ $^ ${SCHEDULER_EXE_LIBS}

${TMP_DIR}:
	${MKDIR} ${TMP_DIR}

${DOXYGEN_DIR}:
	${MKDIR} ${DOXYGEN_DIR}

${TEST_RUNNER}: ${CORE_LIB_FILE} ${AUTHENTICATION_LIB_FILE} ${DB_LIB_FILE} \
                ${STORAGE_CLIENT_LIB_FILE} \
                ${PLAYLIST_EXECUTOR_LIB_FILE} ${EVENT_SCHEDULER_LIB_FILE} \
                ${TEST_RUNNER_OBJS}
	${CXX} ${LDFLAGS} -o $@ ${TEST_RUNNER_OBJS} ${TEST_RUNNER_LIBS}

${CORE_LIB_FILE}:
	${MAKE} -C ${CORE_DIR}

${AUTHENTICATION_LIB_FILE} :
	${MAKE} -C ${AUTHENTICATION_DIR}

${DB_LIB_FILE}:
	${MAKE} -C ${DB_DIR}

${STORAGE_CLIENT_LIB_FILE}:
	${MAKE} -C ${STORAGE_CLIENT_DIR}

${GSTREAMER_ELEMENTS_LIB_FILE}:
	${MAKE} -C ${GSTREAMER_ELEMENTS_DIR}

${PLAYLIST_EXECUTOR_LIB_FILE}:
	${MAKE} -C ${PLAYLIST_EXECUTOR_DIR}

${EVENT_SCHEDULER_LIB_FILE}:
	${MAKE} -C ${EVENT_SCHEDULER_DIR}


#-------------------------------------------------------------------------------
#   Pattern rules
#-------------------------------------------------------------------------------
${TMP_DIR}/%.o : ${SRC_DIR}/%.cxx
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -c -o $@ $<

